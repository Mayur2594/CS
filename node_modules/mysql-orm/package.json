{
  "_args": [
    [
      {
        "raw": "mysql-orm",
        "scope": null,
        "escapedName": "mysql-orm",
        "name": "mysql-orm",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\Mayur 23-7-18\\Project CS\\CS\\CS"
    ]
  ],
  "_from": "mysql-orm@latest",
  "_id": "mysql-orm@0.0.8",
  "_inCache": true,
  "_location": "/mysql-orm",
  "_npmUser": {
    "name": "battlesnake",
    "email": "mark@battlesnake.co.uk"
  },
  "_npmVersion": "1.4.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mysql-orm",
    "scope": null,
    "escapedName": "mysql-orm",
    "name": "mysql-orm",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mysql-orm/-/mysql-orm-0.0.8.tgz",
  "_shasum": "77394751a8c6cd84fb6a60577235edf79d943d36",
  "_shrinkwrap": null,
  "_spec": "mysql-orm",
  "_where": "D:\\Mayur 23-7-18\\Project CS\\CS\\CS",
  "author": {
    "name": "Mark K Cowan",
    "email": "mark@battlesnake.co.uk"
  },
  "bugs": {
    "url": "https://github.com/battlesnake/node-mysql-orm/issues"
  },
  "contributors": [
    {
      "name": "Mark K Cowan",
      "email": "mark@battlesnake.co.uk"
    }
  ],
  "dependencies": {
    "async": "*",
    "cli-color": "*",
    "mysql": "*",
    "underscore": "*"
  },
  "description": "ORM frontend for MySQL, uses JSON schema to define tables and relationships.  This supports automatic table re-generation with indexes, default values, foreign keys, reference options, query logging and more.",
  "devDependencies": {
    "read": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "77394751a8c6cd84fb6a60577235edf79d943d36",
    "tarball": "https://registry.npmjs.org/mysql-orm/-/mysql-orm-0.0.8.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/battlesnake/node-mysql-orm",
  "keywords": [
    "mysql",
    "orm",
    "object schema",
    "object relational mapping",
    "dry",
    "rest",
    "crud"
  ],
  "license": "GPL2",
  "main": "index.js",
  "maintainers": [
    {
      "name": "battlesnake",
      "email": "mark@battlesnake.co.uk"
    }
  ],
  "name": "mysql-orm",
  "optionalDependencies": {},
  "readme": "mysql-orm [![Build Status](https://travis-ci.org/battlesnake/node-mysql-orm.svg?branch=master)](https://travis-ci.org/battlesnake/node-mysql-orm) [![NPM version](https://badge.fury.io/js/mysql-orm.svg)](http://badge.fury.io/js/mysql-orm)\n==============\n\nFor node.js: MySQL wrapper providing object mapping, automatic table generation via JSON schema, automatic foreign key generation and resolution, indexes, default values, reference options and more.\n\nA test is given in the `./tests/` folder, which should demonstrate most of the core functionality.  The components of this module (`load.js`, `read.js`, etc) are documented too, giving considerably more detail than this README.  Inline documentation is provided in the source files, and HTML versions in the docs/ folder.\n\nI recommend using the HTML documentation rather than the documentation below, as the HTML documentation is up-to-date.\n\n# Install\n\n```sh\n$ npm install mysql-orm\n```\n\n# Simple example:\n\n## 1. Define a schema\n\n```node\n/* Define a schema */\nvar schema = {\n\n\t/* User-defined type aliases */\n\t$types: {\n\t\t/* Name begins with colon -> foreign key to some table */\n\t\t'user': ':users',\n\t\t'role': ':roles',\n\t\t'string': 'varchar(64)',\n\t\t'password': 'char(60)',\n\t\t'boolean': 'bit',\n\t\t/* A field of type \"country\" would be a foreign key to table \"countries\" */\n\t\t'country': ':countries'\n\t},\n\n\tusers: {\n\t\t/* \"id\" field is generated automatically */\n\t\t/*\n\t\t * Dollar-prefix is used for metadata, e.g. specifying the\n\t\t * default sort order\n\t\t */\n\t\t$sort: '+username',\n\t\t/* This field must have a unique value (unique: true) */\n\t\tusername: { type: 'string', unique: true },\n\t\tpassword: { type: 'password' },\n\t\trole: { type: 'role' },\n\t\tlastactive: { type: 'timestamp' },\n\t\tcountry: { type: 'country' }\n\t},\n\n\troles: {\n\t\tname: { type: 'string', unique: true },\n\t\trights: { type: 'string' }\n\t},\n\n\tposts: {\n\t\t/*\n\t\t * Prefix a sort field by + or - to explicitly set ascending\n\t\t * or descending sort order\n\t\t */\n\t\t$sort: '-date',\n\t\t/*\n\t\t * Set the ON UPDATE and ON DELETE actions for foreign key\n\t\t * constraint\n\t\t */\n\t\tuser: { type: 'user', onDelete: 'cascade', onUpdate: 'cascade' },\n\t\t/* Index this field (index: true) */\n\t\ttitle: { type: 'string', index: true },\n\t\tcontent: { type: 'text' },\n\t\tdate: { type: 'timestamp' },\n\t\tdeleted: { type: 'boolean' }\n\t},\n\n\tcountries: {\n\t\t$sort: '+name',\n\t\tname: { type: 'string', index: true }\n\t}\n\n};\n```\n\n## 2. Define the initial dataset (optional)\n\n```node\n/* \n * Define the initial contents of the database (optional)\n *\n * V8 preserves field order - which is useful since some tables depend on\n * content in others\n *\n * Tables are processed in the order that they appear in this object\n */\nvar data = {\n\n\troles: [\n\t\t{ name: 'admin', rights: '*' },\n\t\t{ name: 'ploom', rights: 'being a ploom' },\n\t\t{ name: 'pleb', rights: 'lol' }\n\t],\n\n\t/*\n\t * The auto_increment primary key `id` field is created automatically for\n\t * each table\n\t */\n\tcountries: [\n\t\t{ id: 44, name: 'United Kingdom' },\n\t\t{ id: 372, name: 'Estonia' },\n\t\t/* Lithuania was the largest country in Europe at one point */\n\t\t{ id: 370, name: 'Lithuania' },\n\t\t{ id: 7, name: 'Russia' }\n\t],\n\n\tusers: [\n\t\t/*\n\t\t * We don't know what ID values the roles will have and we didn't\n\t\t * explicitly specify them, but we can use the automatic foreign-key\n\t\t * lookup to specify roles by name instead.  Such search constraints\n\t\t * must resolve to one and only one record in the parent table.\n\t\t * Automatic lookup is also used for the country field.  Easy!\n\t\t */\n\t\t{ username: 'mark', password: Array(61).join('\\0'), role: { name: 'admin' }, country: { name: 'Estonia' } },\n\t\t{ username: 'marili', password: Array(61).join('\\0'), role: { name: 'ploom' }, country: { name: 'Estonia' } }\n\t],\n\n\tposts: [\n\t\t{ user: { username: 'mark' }, title: 'Test post', content: 'This is a test post', deleted: false }\n\t]\n\n};\n```\n\n## 3. Specify the MySQL database parameters\n\n```node\n/* See https://github.com/felixge/node-mysql for more information */\n\nvar mysql_params = {\n\thost: 'localhost',\n\tuser: 'username',\n\tpassword: 'password'\n};\n\n/*\n * NOTE: The user must have SELECT, UPDATE, DELETE, etc rights to the\n * database specified in the next section\n */\n```\n\n## 4. Specify options for the ORM\n\n```node\nvar orm_options = {\n\tmysql: mysql_params,\n\t/*\n\t * Database name.  User specified in previous section MUST have\n\t * relevant rights to this database.\n\t */\n\tdatabase: 'mysql-orm-test',\n\t/*\n\t * CAUTION: Setting this to true will drop the database then recreate\n\t * it\n\t */\n\trecreateDatabase: false,\n\t/*\n\t * CAUTION: Setting this to true will drop the tables mentioned in\n\t * the schema then recreate them\n\t */\n\trecreateTables: false,\n\t/* Causes an annoying delay between each line output by ORM's logger */\n\tdebug: process.env.DEBUG,\n\t/*\n\t * Log level (1,2,3=FAIL/WARN/INFO).  See logging.js for more info.\n\t * Level 2 (WARN) is default.\n\t */\n\tlogLevel: 2\n};\n```\n\n## 5. Create the ORM\n\nThis will create the database if it does not exist and create the tables if they do not exist.\nIf `recreateTables` or `recreateDatabase` is specified, then the `data` will be added to the database.\nNote that this will not occur if the tables/database are created but the `recreate*` parameters were not set.\nCAUTION: `recreateTables` / `recreateDatabase` are for development purposes only, they WILL cause orm to drop the database and tables if they already exist.\n\nIf `skipChecks` is `true` in the options, mysql-orm will not check for existence of the database or the tables, will not regenerate them even if `recreate*` are set, and it will return synchronously.\n\n```node\nvar mysql_orm = require('mysql_orm');\nvar orm = null;\n\nmysql_orm.create(schema, data, orm_options, function (err, ormObject) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\torm = ormObject;\n});\n```\n\n## Once the callback has returned the orm object, we're good to go!\n\n### Reading (loading records from the database)\n\n```node\n/*\n * loadMany: Read multiple records from a table\n *\n * Specify the table by reference in the schema, or as a string\n * e.g. 'countries'\n */\norm.loadMany(orm.schema.countries, null, function (err, countries) {\n\tif (err) {\n\t\tthrow err;\n\t}\n\tcountries.forEach(function (country) { console.write(country.name });\n});\n\n/*\n * load: Retrieve one record, return error if none were found or\n * if several were found\n */\norm.load(orm.schema.users, 1, function (err, user) {\n\tconsole.log(user.name + ' is in ' + user.country.name);\n});\n/*\n * Oh did you notice that the `country` is automatically looked\n * up there?  Awesome!\n */\n\n/*\n * The second parameter of load / loadMany can also be an object\n * containing search criteria\n */\norm.loadMany(orm.schema.users, { country: { name: 'Estonia' } }, callback);\n/* We specified a value in a parent table as the search criteria :) */\n```\n\n### Writing (saving records to the database)\n\n```node\n/* Load a record, modify it, save it */\norm.load(orm.schema.users, { name: 'mark' }, function (err, user) {\n\tif (err) throw err;\n\tuser.role = { name: 'pleb' };\n\torm.save(orm.schema.users, user, function (err) {\n\t\tif (err) throw err;\n\t\tconsole.log('User \"mark\" is now a pleb');\n\t});\n});\n\n/*\n * We could also do this instead, if we knew the user's ID.  If the id\n * is not specified, save() will create a new user and set the id field\n * of the passed object to the new id returned from MySQL.\n */\norm.save(orm.schema.users, { id: 1, role: { name: 'pleb' } }, function (err) {\n\tif (err) throw err;\n\tconsole.log('User \"mark\" is now a pleb');\n});\n\n/*\n * When inserting new items with no ID specified, the ID field of the\n * passed object is set to the new row's ID in the database.\n */\nvar guestRole = { name: 'guest', rights: 'read_posts,like_posts' };\norm.save(orm.schema.roles, guestRole, function (err) {\n\tif (err) throw err;\n\tconsole.log('ID of guest role in roles table is ' + guestRole.id);\n});\n\n/*\n * Save multiple records to a table\n * This calls save() internally, so can update or create records.\n * See save.js for details of how to explicity request an UPDATE or\n * an INSERT.\n */\norm.saveMany(orm.schema.countries,\n\t[\n\t\t{ id: 358, name: 'Finland' },\n\t\t{ id: 46, name: 'Sweden' }\n\t],\n\tfunction (err) {\n\t\t...\n\t});\n\n/*\n * Save to multiple tables.  This calls saveMany() internally and\n * wraps all the saveMany() calls in one transaction\n */\norm.saveMultipleTables(\n\t{\n\t\tcountries: [ { id: 40, name: 'Romania' } ],\n\t\tusers: [ name: 'Dazza', country: { name: 'Romania' }, ... ]\n\t},\n\tfunction (err) {\n\t});\n\n```\n\n### Deleting data\n\n```node\norm.delete(orm.schema.users, 1, callback);\norm.delete(orm.schema.countries, { name: 'Atlantis' }, callback);\norm.deleteMany(orm.schema.posts, { user: { name: 'Bob' } }, callback);\n```\n\n# Debugging\n```node\norm.logLevel = 3;\n/* Now STDOUT will get flooded by debugging messages and SQL code */\n\norm.debug = true;\n/*\n * Now there will be an annoying blocking delay after each logged\n * message\n *\n * Don't use this in production!\n */\n\nYou can also set logLevel and debug in the orm_options parameter.\n```\n\n# Coding standards\n(for contributors only!  I'm not going all Python at you guys, users!)\n\n * Single tab for indent.  This way I can have a 4 column indent, while you can enjoy your preferred indent size simply by setting an appropriate tabstop.  Strictly no spaces for indentation of code.\n\n * require's all have their own var.  This is non-negotiable.  This way there is no disagreement over where commas go as their aren't any, and editing require's is easier.\n\n * External require's come before internal ones, with a blank line before, after, and between the two blocks.\n\n   ```node\n\n   var mysql = require('mysql');\n   var async = require('async');\n   var _ = require('underscore');\n\n   var myUtil = require('./myUtil/');\n\t\t\t\n   ```\n\n * No strict rule for indentation of anonymous functions, objects or arrays.  Make it readable and don't waste too many columns.\n\n * Open brace for control block (`if`/`do`/`while`/`function`/`else`) is ALWAYS on same line as block command.  Close brace never shares its line with code unless the entire block is a `{ one-liner }`.  This includes the brace before `else`, `else` has its own line (although I'm not too bothered by this, as I prefer `} else {` for C/C++ code).\n\n   ```node\n   function myFunc(a, b, c) {\n   \t\tif (a) {\n   \t\t\twhile (b(c--)) { console.log(c); }\n   \t\t}\n   \t\telse {\n   \t\t\tasync_thing(param, function (err, res) {\n   \t\t\t\t/*\n   \t\t\t\t * Indent anonymous functions in any way that is readable\n   \t\t\t\t * and doesn't waste a tonne of columnage.\n   \t\t\t\t */\n   \t\t\t});\n   \t\t\t/*\n   \t\t\t * The above close-brace shares a line with bracket, semicolon but\n   \t\t\t * never with code.\n   \t\t\t */\n   \t\t}\n   \t\t/* Objects and arrays... just make it readable and not too wasteful */\n   \t\ta = [1, 2, 3,\n   \t\t\t\t{\n   \t\t\t\t\tname: 'four'\n   \t\t\t\t}];\n   \t\tb = [\n   \t\t\t'What is your favourite colour',\n   \t\t\t'What is the velocity of an unladen swallow',\n   \t\t\t'Aaaaaaaaiiiiiiiii'\n   \t\t];\n   }\n   ```\n\n * Comment are padded by a space.  Multiline comments are padded by a blank comment line.  `//` comments are only used for lit.js documentation and for removing bits of code, never for actual comments.\n\n   ```node\n   \t/* Single-line comment with a space padding on each side */\n\n   \t/*\n\t * Multi-line comment with space padding on left\n\t * and blank line padding above and below.\n\t */\n\t\t\t \n   \t//console.log('Only use // for commenting out code.  Padding is not important in this case.');\n\n\t//\n\t// # lit.js documenation\n\t//\n   ```\n\t\t\n   I prefer the Oxford comma for technical writing, but I'm not too bothered about whether you use it or not.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/battlesnake/node-mysql-orm.git"
  },
  "scripts": {
    "test": "./run-tests.js testuser testpwd testdb31415926"
  },
  "version": "0.0.8"
}
